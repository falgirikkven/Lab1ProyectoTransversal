package lab1proyectotransversal.vistas;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lab1proyectotransversal.accesoADatos.*;
import lab1proyectotransversal.entidades.*;

/**
 *
 * @author Grupo-3
 */
public class ManejoInscripcion extends javax.swing.JInternalFrame {

    private final AlumnoData alumnoData;      
    private final InscripcionData inscripcionData;  
    private DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int i, int i1) {
            return false;
        }
    };

    /**
     * Creates new form ManejoInscripciones
     */
    public ManejoInscripcion(AlumnoData alumnoData, InscripcionData inscripcionData) {
        initComponents();
        this.alumnoData = alumnoData;
        this.inscripcionData = inscripcionData;
        configurarComboBox();
        armarCabeceraTabla();
    }

    private void configurarComboBox() {     
        List<Alumno> listaAlumnos = alumnoData.listarAlumnos();
        for (Alumno alum : listaAlumnos) {
            jcbAlumSeleccion.addItem(alum);
        }
    }

    private void armarCabeceraTabla() {     
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Año");
        jtListadoMaterias.setModel(modelo);
    }

    private void borrarFilasTabla() {       
        int indFil = jtListadoMaterias.getRowCount() - 1;
        for (; indFil >= 0; indFil--) {
            modelo.removeRow(indFil);
        }
    }
    
    private void configContTablaMatNoInscrip() {
        borrarFilasTabla();
        Alumno alumno = (Alumno) jcbAlumSeleccion.getSelectedItem();        
        List<Materia> listaMatNoCursadas = inscripcionData.obtenerMateriasNOCursadas(alumno.getIdAlumno());        
        for (Materia mat : listaMatNoCursadas) {
            modelo.addRow(new Object[]{mat.getIdMateria(), mat.getNombre(), mat.getAnio()});
        }
    }

    private void configContTablaMatInscrip() {
        borrarFilasTabla();
        Alumno alumno = (Alumno) jcbAlumSeleccion.getSelectedItem();
        List<Materia> listaMaterias = inscripcionData.obtenerMateriasCursadas(alumno.getIdAlumno());
        for (Materia mat : listaMaterias) {
            modelo.addRow(new Object[]{mat.getIdMateria(), mat.getNombre(), mat.getAnio()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        materiasGrupo = new javax.swing.ButtonGroup();
        jlTitulo = new javax.swing.JLabel();
        jlAlumSeleccion = new javax.swing.JLabel();
        jcbAlumSeleccion = new javax.swing.JComboBox<>();
        jlListaMaterias = new javax.swing.JLabel();
        jrbMatInscrip = new javax.swing.JRadioButton();
        jrbMatNoInscrip = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtListadoMaterias = new javax.swing.JTable();
        jbInscribir = new javax.swing.JButton();
        jbAnularInscrip = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(517, 444));

        jlTitulo.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jlTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlTitulo.setText("Formulario de Inscripción");

        jlAlumSeleccion.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jlAlumSeleccion.setText("Alumno seleccionado:");

        jcbAlumSeleccion.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jcbAlumSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlumSeleccionActionPerformed(evt);
            }
        });

        jlListaMaterias.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlListaMaterias.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlListaMaterias.setText("Listado de Materias");

        materiasGrupo.add(jrbMatInscrip);
        jrbMatInscrip.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jrbMatInscrip.setText("Materias Inscriptas");
        jrbMatInscrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbMatInscripActionPerformed(evt);
            }
        });

        materiasGrupo.add(jrbMatNoInscrip);
        jrbMatNoInscrip.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jrbMatNoInscrip.setText("Materias no insciptas");
        jrbMatNoInscrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbMatNoInscripActionPerformed(evt);
            }
        });

        jtListadoMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jtListadoMaterias);

        jbInscribir.setText("Inscribir");
        jbInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInscribirActionPerformed(evt);
            }
        });

        jbAnularInscrip.setText("Anular Inscripcion");
        jbAnularInscrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnularInscripActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jlAlumSeleccion)
                        .addGap(18, 18, 18)
                        .addComponent(jcbAlumSeleccion, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 107, Short.MAX_VALUE))
                    .addComponent(jlListaMaterias, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jrbMatInscrip)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jrbMatNoInscrip)
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jbInscribir)
                .addGap(42, 42, 42)
                .addComponent(jbAnularInscrip)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSalir)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlAlumSeleccion)
                    .addComponent(jcbAlumSeleccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jlListaMaterias)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbMatInscrip)
                    .addComponent(jrbMatNoInscrip))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbInscribir)
                    .addComponent(jbAnularInscrip)
                    .addComponent(jbSalir))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jrbMatNoInscripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbMatNoInscripActionPerformed
        configContTablaMatNoInscrip();

        // configurar botones
        jbAnularInscrip.setEnabled(false);
        jbInscribir.setEnabled(true);
    }//GEN-LAST:event_jrbMatNoInscripActionPerformed

    private void jcbAlumSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlumSeleccionActionPerformed
        if (jrbMatInscrip.isSelected()) {
            configContTablaMatInscrip();
        }
        if (jrbMatNoInscrip.isSelected()) {
            configContTablaMatNoInscrip();
        }
    }//GEN-LAST:event_jcbAlumSeleccionActionPerformed

    private void jrbMatInscripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbMatInscripActionPerformed
        configContTablaMatInscrip();

        // configurar botones
        jbInscribir.setEnabled(false);
        jbAnularInscrip.setEnabled(true);
    }//GEN-LAST:event_jrbMatInscripActionPerformed

    private void jbInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInscribirActionPerformed
        
        Alumno alumno = (Alumno) jcbAlumSeleccion.getSelectedItem();
        // si no hay materias en jtListadoMaterias, advertir al usuario 
        if (jtListadoMaterias.getRowCount() == 0) {            
            JOptionPane.showMessageDialog(this, """
                                                No quedan más materias en las que inscribir al alumno con 
                                                DNI: """ + alumno.getDni(), "Información", 1);
            return;
        }

        switch (jtListadoMaterias.getSelectedRowCount()) {
            case 0:
                JOptionPane.showMessageDialog(this, """
                                                    Para inscribir al alumno en una materia primero debe 
                                                    seleccionar la misma en la lista, haciendole click.""", "Advertencia", JOptionPane.WARNING_MESSAGE);
                break;

            case 1:
                int filaSelec = jtListadoMaterias.getSelectedRow();

                // obteniendo datos de materia
                int idMat = (int) jtListadoMaterias.getValueAt(filaSelec, 0);
                String nombreMat = (String) jtListadoMaterias.getValueAt(filaSelec, 1);
                int anio = (int) jtListadoMaterias.getValueAt(filaSelec, 2);

                Materia materia = new Materia(idMat, nombreMat, anio, true);
                Inscripcion inscripcion = new Inscripcion(alumno, materia, 0);

                // se ejecuta la operación y se muestran los resultados
                if (inscripcionData.guardarInscripcion(inscripcion)) {
                    modelo.removeRow(filaSelec);    // Se elimina de la tabla de materias en las que el alumno no se ha inscripto la fila de la materia en la que se acaba de inscribir                    
                    JOptionPane.showMessageDialog(this, """
                                                        Se ha inscripto al alumno con 
                                                        DNI: """ + alumno.getDni() + " en " + materia.getNombre(), "Información", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, """
                                                        ERROR: No se ha podido inscribir al alumno 
                                                        con DNI: """ + alumno.getDni() + " en " + materia.getNombre(), "Error", JOptionPane.ERROR_MESSAGE);                                        
                }
                break;

            default:
                JOptionPane.showMessageDialog(this, """
                                                    Debe seleccionar sólo una materia de la lista, haciendo click
                                                    en la misma.""", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbInscribirActionPerformed

    private void jbAnularInscripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnularInscripActionPerformed
        
        Alumno alumno = (Alumno) jcbAlumSeleccion.getSelectedItem();
        // si no hay materias en jtListadoMaterias, advertir al usuario
        if (jtListadoMaterias.getRowCount() == 0) {            
            JOptionPane.showMessageDialog(this, """
                                                No quedan más materias en las que desinscribir al alumno con 
                                                DNI: """ + alumno.getDni(), "Información", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        switch (jtListadoMaterias.getSelectedRowCount()) {
            case 0:
                JOptionPane.showMessageDialog(this, """
                                                    Para desinscribir al alumno en una materia primero debe 
                                                    seleccionar la misma en la lista, haciendole click.""", "Advertencia", JOptionPane.WARNING_MESSAGE);
                break;

            case 1:
                int filaSelec = jtListadoMaterias.getSelectedRow();
                // Obteniendo datos de la materia
                String nombreMat = (String) jtListadoMaterias.getValueAt(filaSelec, 1);
                int idMat = (int) jtListadoMaterias.getValueAt(filaSelec, 0);
                // Ejecutando la operación y mostrando los resultados
                if (inscripcionData.borrarInscripcionMateriaAlumno(alumno.getIdAlumno(), idMat)) {
                    modelo.removeRow(filaSelec);
                    
                    JOptionPane.showMessageDialog(this, """
                                                        Se ha borrado la inscripción del alumno con 
                                                        DNI: """ + alumno.getDni() + " en " + nombreMat, "Información", JOptionPane.INFORMATION_MESSAGE);                                                            
                } else {
                    JOptionPane.showMessageDialog(this, """
                                                        ERROR: No se ha podido borrar la inscripción del alumno 
                                                        con DNI: """ + alumno.getDni() + " en " + nombreMat, "Error", JOptionPane.ERROR_MESSAGE);                                        
                }                
                break;

            default:
                JOptionPane.showMessageDialog(this, """
                                                    Debe seleccionar sólo una materia de la lista, haciendo click
                                                    en la misma.""", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbAnularInscripActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        this.hide();
    }//GEN-LAST:event_jbSalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAnularInscrip;
    private javax.swing.JButton jbInscribir;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcbAlumSeleccion;
    private javax.swing.JLabel jlAlumSeleccion;
    private javax.swing.JLabel jlListaMaterias;
    private javax.swing.JLabel jlTitulo;
    private javax.swing.JRadioButton jrbMatInscrip;
    private javax.swing.JRadioButton jrbMatNoInscrip;
    private javax.swing.JTable jtListadoMaterias;
    private javax.swing.ButtonGroup materiasGrupo;
    // End of variables declaration//GEN-END:variables
}
