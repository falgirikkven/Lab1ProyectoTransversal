package lab1proyectotransversal.vistas;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import lab1proyectotransversal.accesoADatos.AlumnoData;
import lab1proyectotransversal.entidades.Alumno;

/**
 *
 * @author Grupo-3
 */
public class GestionAlumno extends javax.swing.JInternalFrame {

    AlumnoData alumnoData;

    /**
     * Creates new form GestionAlumno
     */
    public GestionAlumno(AlumnoData alumnoData) {
        initComponents();
        this.alumnoData = alumnoData;
    }

    private void limpiarEntradas() {
        documentoTextField.setText("");
        apellidoTextField.setText("");
        nombreTextField.setText("");
        fechaNacimientoCalendar.setCalendar(null);
    }

    // LocalDate -> Calendar
    private Calendar localDateToCalendar(LocalDate ldate) {
        ZonedDateTime zonedDateTime = ldate.atStartOfDay(ZoneId.systemDefault());
        Instant instant = zonedDateTime.toInstant();
        Date date = Date.from(instant);
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        return calendar;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo = new javax.swing.JLabel();
        documentoLabel = new javax.swing.JLabel();
        documentoTextField = new javax.swing.JTextField();
        apellidoLabel = new javax.swing.JLabel();
        apellidoTextField = new javax.swing.JTextField();
        nombreLabel = new javax.swing.JLabel();
        nombreTextField = new javax.swing.JTextField();
        estadoRadioButton = new javax.swing.JRadioButton();
        estadoLabel = new javax.swing.JLabel();
        fechaNacimientoCalendar = new com.toedter.calendar.JDateChooser();
        fechaNacimientoLabel = new javax.swing.JLabel();
        limpiarButton = new javax.swing.JButton();
        darBajaButton = new javax.swing.JButton();
        guardarButton = new javax.swing.JButton();
        salirButton = new javax.swing.JButton();
        buscarButton = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Alumnos");

        titulo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo.setText("Alumno");

        documentoLabel.setText("Documento:");

        apellidoLabel.setText("Apellido:");

        nombreLabel.setText("Nombre:");

        estadoLabel.setText("Estado:");

        fechaNacimientoLabel.setText("Fecha de Nacimiento:");

        limpiarButton.setText("Limpiar");
        limpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarButtonActionPerformed(evt);
            }
        });

        darBajaButton.setText("Dar Baja");
        darBajaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darBajaButtonActionPerformed(evt);
            }
        });

        guardarButton.setText("Guardar");
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        salirButton.setText("Salir");
        salirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirButtonActionPerformed(evt);
            }
        });

        buscarButton.setText("Buscar");
        buscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(limpiarButton)
                        .addGap(18, 18, 18)
                        .addComponent(darBajaButton)
                        .addGap(18, 18, 18)
                        .addComponent(guardarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salirButton)
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(documentoLabel)
                            .addComponent(apellidoLabel)
                            .addComponent(nombreLabel)
                            .addComponent(estadoLabel)
                            .addComponent(fechaNacimientoLabel))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(estadoRadioButton)
                            .addComponent(documentoTextField)
                            .addComponent(apellidoTextField)
                            .addComponent(nombreTextField)
                            .addComponent(fechaNacimientoCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(buscarButton)
                        .addContainerGap(30, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(documentoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(documentoLabel)
                    .addComponent(buscarButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apellidoLabel)
                    .addComponent(apellidoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(estadoRadioButton)
                    .addComponent(estadoLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fechaNacimientoCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaNacimientoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limpiarButton)
                    .addComponent(darBajaButton)
                    .addComponent(guardarButton)
                    .addComponent(salirButton))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarButtonActionPerformed
        // Validar DNI
        int dni;
        try {
            dni = Integer.parseInt(documentoTextField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El documento debe ser un numero entero sin decimales", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Buscar Alumno
        Alumno alumno = alumnoData.buscarAlumno("dni", dni);
        if (alumno == null) {
            // No encontrado: limpiar campos (excepto documento)
            apellidoTextField.setText("");
            nombreTextField.setText("");
            fechaNacimientoCalendar.setCalendar(null);
            JOptionPane.showMessageDialog(this, "No se ha encontrado al alumno", "Información", JOptionPane.INFORMATION_MESSAGE);

        } else {
            // Encontrado: actualizar campos
            apellidoTextField.setText(alumno.getApellido());
            nombreTextField.setText(alumno.getNombre());
            Calendar calendar = localDateToCalendar(alumno.getFechaNacimiento());
            fechaNacimientoCalendar.setCalendar(calendar);

        }
    }//GEN-LAST:event_buscarButtonActionPerformed

    private void limpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarButtonActionPerformed
        limpiarEntradas();
    }//GEN-LAST:event_limpiarButtonActionPerformed

    private void darBajaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darBajaButtonActionPerformed
        // Validar DNI
        int dni;
        try {
            dni = Integer.parseInt(documentoTextField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El documento debe ser un numero entero sin decimales", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Buscar alumno
        Alumno alumno = alumnoData.buscarAlumno("dni", dni);
        if (alumno == null) {
            // No encontrado, salir
            JOptionPane.showMessageDialog(this, "No hay alumno alumnos con este documento", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Eliminar alumnos y limpiar campos (excepto documento)
        if (alumnoData.eliminarAlumno(alumno.getIdAlumno())) {
            apellidoTextField.setText("");
            nombreTextField.setText("");
            fechaNacimientoCalendar.setCalendar(null);
            JOptionPane.showMessageDialog(this, "Alumno dado de baja", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Por alguna razon no se pudo eliminar
            JOptionPane.showMessageDialog(this, "No se pudo dar de baja al alumno", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_darBajaButtonActionPerformed

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        // Obtener datos de los inputs
        String documentoStr = documentoTextField.getText();
        String apellido = apellidoTextField.getText();
        String nombre = nombreTextField.getText();
        boolean estado = estadoRadioButton.isSelected();
        Date date = fechaNacimientoCalendar.getDate();
        System.out.println(estado);

        // Salir si algun input esta en blanco o nulo
        if (documentoStr.isBlank() || apellido.isBlank() || nombre.isBlank() || date == null) {
            JOptionPane.showMessageDialog(this, "Todos los campos deben ser rellenados", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validar DNI
        int dni;
        try {
            dni = Integer.parseInt(documentoTextField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El documento debe ser un numero entero sin decimales", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener Local date del calendar
        LocalDate fechaNacimiento = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        // Buscar este alumno
        Alumno alumno = alumnoData.buscarAlumno("dni", dni);
        // Guardar resultado posterior del SQL
        Boolean result = false;

        if (alumno == null) {
            // Alumno no encontrado, se crea uno nuevo
            alumno = new Alumno(dni, nombre, apellido, fechaNacimiento, estado);
            result = alumnoData.guardarAlumno(alumno);
        } else {
            // Alumno encontrado, actualizar el campo
            alumno.setDni(dni);
            alumno.setNombre(nombre);
            alumno.setApellido(apellido);
            alumno.setFechaNacimiento(fechaNacimiento);
            alumno.setEstado(estado);
            result = alumnoData.modificarAlumno(alumno);
        }

        // Imprimir resultado SQL (creacion ó actualizacion)
        if (result) {
            JOptionPane.showMessageDialog(this, "Alumno guardado", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo guardar al alumno", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_guardarButtonActionPerformed

    private void salirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirButtonActionPerformed
        this.hide();
    }//GEN-LAST:event_salirButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apellidoLabel;
    private javax.swing.JTextField apellidoTextField;
    private javax.swing.JButton buscarButton;
    private javax.swing.JButton darBajaButton;
    private javax.swing.JLabel documentoLabel;
    private javax.swing.JTextField documentoTextField;
    private javax.swing.JLabel estadoLabel;
    private javax.swing.JRadioButton estadoRadioButton;
    private com.toedter.calendar.JDateChooser fechaNacimientoCalendar;
    private javax.swing.JLabel fechaNacimientoLabel;
    private javax.swing.JButton guardarButton;
    private javax.swing.JButton limpiarButton;
    private javax.swing.JLabel nombreLabel;
    private javax.swing.JTextField nombreTextField;
    private javax.swing.JButton salirButton;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
